export const runtime = "nodejs";
import { NextRequest, NextResponse } from "next/server";
import { composer } from "@/lib/ai/coderClient";
import { getProject, writeFiles } from "@/lib/store";
import { maybeWriteToDisk } from "@/lib/utils/writeToDisk";

export async function POST(req: NextRequest) {
  try {
    const { projectId } = await req.json();
    if (!projectId) return NextResponse.json({ error: "projectId required" }, { status: 400 });
    
    const project = getProject(projectId);
    if (!project) {
      return NextResponse.json({ 
        error: "Project not found. Note: In-memory storage doesn't persist between requests in serverless environments. Try calling /api/plan first in the same session." 
      }, { status: 404 });
    }
    
    if (!project.plan) {
      return NextResponse.json({ error: "plan missing; call /api/plan first" }, { status: 400 });
    }

    console.log('[Scaffold] Using plan:', project.plan);

    const res = await composer(project.plan);
    
    console.log('[Scaffold] GPT-5-mini response:', res);
    
    // Extract JSON from GPT-5 responses API format - use output_text for convenience
    let payloadText = res.output_text || "{}";
    let payload;
    
    try {
      payload = JSON.parse(payloadText);
    } catch (parseError) {
      console.log('[Scaffold] JSON parse failed, attempting to fix...');
      const firstBrace = payloadText.indexOf('{');
      const lastBrace = payloadText.lastIndexOf('}');
      if (firstBrace !== -1 && lastBrace !== -1) {
        payloadText = payloadText.substring(firstBrace, lastBrace + 1);
        payload = JSON.parse(payloadText);
      } else {
        return NextResponse.json({ error: "Failed to parse GPT-5-mini response as JSON" }, { status: 500 });
      }
    }
    
    const files = payload.files as { path: string; content: string }[];
    
    if (!files || !Array.isArray(files)) {
      return NextResponse.json({ error: "No files generated by GPT-5-mini" }, { status: 500 });
    }

    const saved = writeFiles(projectId, files);
    const disk = await maybeWriteToDisk(files);

    return NextResponse.json({ 
      count: saved.length, 
      files: files.map(f => ({ path: f.path, size: f.content.length })),
      wroteToDisk: disk 
    }, { status: 200 });
    
  } catch (error) {
    console.error('[Scaffold] Error:', error);
    return NextResponse.json({ 
      error: "Failed to generate files",
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}